namespace MetaExchange.Models;

/// <summary>
/// Represents the complete optimal execution plan generated by the meta-exchange algorithm.
/// Contains the aggregated results of finding the best prices across multiple exchanges,
/// including individual order details, cost analysis, and execution status.
/// </summary>
public class ExecutionPlan
{
    /// <summary>
    /// The collection of individual trade orders that should be executed across various exchanges
    /// to achieve the optimal total price. Orders are sequenced by the best execution algorithm,
    /// typically starting with the most favorable prices and progressing until the requested amount is filled.
    /// </summary>
    public List<ExecutionOrder> Orders { get; set; } = new();

    /// <summary>
    /// The total amount of Bitcoin that will be traded across all orders in this execution plan, expressed in BTC units.
    /// May be less than the originally requested amount if insufficient liquidity was available
    /// within the exchange balance constraints.
    /// </summary>
    public decimal TotalAmount { get; set; }

    /// <summary>
    /// The total cost or revenue for this execution plan in EUR currency.
    /// For Buy orders: Total EUR cost that will be spent across all exchanges
    /// For Sell orders: Total EUR revenue that will be received across all exchanges
    /// Represents the sum of all individual order costs in the execution plan.
    /// </summary>
    public decimal TotalCost { get; set; }

    /// <summary>
    /// The volume-weighted average price per Bitcoin across all orders in the execution plan, expressed in EUR per BTC.
    /// Calculated as TotalCost ÷ TotalAmount, providing a single price metric
    /// that represents the overall execution quality achieved by the meta-exchange algorithm.
    /// </summary>
    public decimal AveragePrice { get; set; }

    /// <summary>
    /// Indicates whether the execution plan successfully fulfills the entire requested trade amount.
    /// True if TotalAmount equals the originally requested amount.
    /// False if only partial execution was possible due to insufficient liquidity or balance constraints.
    /// </summary>
    public bool IsFullyExecuted { get; set; }

    /// <summary>
    /// A human-readable status message describing the execution plan result.
    /// Examples: "Fully executed.", "Partially executed. 0.05000000 BTC could not be fulfilled."
    /// Provides additional context about the execution outcome for logging and user feedback.
    /// </summary>
    public string Message { get; set; } = string.Empty;
}